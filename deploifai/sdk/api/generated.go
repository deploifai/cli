// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetUserMeUser includes the requested fields of the GraphQL type User.
type GetUserMeUser struct {
	Id      string                   `json:"id"`
	Account GetUserMeUserAccount     `json:"account"`
	Teams   []GetUserMeUserTeamsTeam `json:"teams"`
}

// GetId returns GetUserMeUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserMeUser) GetId() string { return v.Id }

// GetAccount returns GetUserMeUser.Account, and is useful for accessing the field via an interface.
func (v *GetUserMeUser) GetAccount() GetUserMeUserAccount { return v.Account }

// GetTeams returns GetUserMeUser.Teams, and is useful for accessing the field via an interface.
func (v *GetUserMeUser) GetTeams() []GetUserMeUserTeamsTeam { return v.Teams }

// GetUserMeUserAccount includes the requested fields of the GraphQL type Account.
type GetUserMeUserAccount struct {
	Id       string `json:"id"`
	Username string `json:"username"`
	IsTeam   bool   `json:"isTeam"`
}

// GetId returns GetUserMeUserAccount.Id, and is useful for accessing the field via an interface.
func (v *GetUserMeUserAccount) GetId() string { return v.Id }

// GetUsername returns GetUserMeUserAccount.Username, and is useful for accessing the field via an interface.
func (v *GetUserMeUserAccount) GetUsername() string { return v.Username }

// GetIsTeam returns GetUserMeUserAccount.IsTeam, and is useful for accessing the field via an interface.
func (v *GetUserMeUserAccount) GetIsTeam() bool { return v.IsTeam }

// GetUserMeUserTeamsTeam includes the requested fields of the GraphQL type Team.
type GetUserMeUserTeamsTeam struct {
	Id      string                        `json:"id"`
	Account GetUserMeUserTeamsTeamAccount `json:"account"`
}

// GetId returns GetUserMeUserTeamsTeam.Id, and is useful for accessing the field via an interface.
func (v *GetUserMeUserTeamsTeam) GetId() string { return v.Id }

// GetAccount returns GetUserMeUserTeamsTeam.Account, and is useful for accessing the field via an interface.
func (v *GetUserMeUserTeamsTeam) GetAccount() GetUserMeUserTeamsTeamAccount { return v.Account }

// GetUserMeUserTeamsTeamAccount includes the requested fields of the GraphQL type Account.
type GetUserMeUserTeamsTeamAccount struct {
	Id       string `json:"id"`
	Username string `json:"username"`
	IsTeam   bool   `json:"isTeam"`
}

// GetId returns GetUserMeUserTeamsTeamAccount.Id, and is useful for accessing the field via an interface.
func (v *GetUserMeUserTeamsTeamAccount) GetId() string { return v.Id }

// GetUsername returns GetUserMeUserTeamsTeamAccount.Username, and is useful for accessing the field via an interface.
func (v *GetUserMeUserTeamsTeamAccount) GetUsername() string { return v.Username }

// GetIsTeam returns GetUserMeUserTeamsTeamAccount.IsTeam, and is useful for accessing the field via an interface.
func (v *GetUserMeUserTeamsTeamAccount) GetIsTeam() bool { return v.IsTeam }

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	Me GetUserMeUser `json:"me"`
}

// GetMe returns GetUserResponse.Me, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetMe() GetUserMeUser { return v.Me }

func GetUser(
	ctx context.Context,
	client graphql.Client,
) (*GetUserResponse, error) {
	req := &graphql.Request{
		OpName: "GetUser",
		Query: `
query GetUser {
	me {
		id
		account {
			id
			username
			isTeam
		}
		teams {
			id
			account {
				id
				username
				isTeam
			}
		}
	}
}
`,
	}
	var err error

	var data GetUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
